from secrets import token_hex

from pyrogram import Client, filters

from models import Post
from config import api_id, api_hash, token, admin_id

stating = {}
spammer = Client("bot_spammer", api_id=api_id, api_hash=api_hash, parse_mode="html")
app = Client(
    "bot_app", api_id=api_id, api_hash=api_hash, bot_token=token, parse_mode="html"
)


def admin_filter(_, __, message):
    return message.from_user.id == admin_id


def finite_state_machine(data: str = None):
    def func(flt, __, message):
        if message.from_user.id not in stating:
            stating[message.from_user.id] = {"state": "*", "data": {}}

        return stating[message.from_user.id]["state"] == flt.data

    return filters.create(func, data=data)


def clear_state(user_id):
    stating[user_id] = {"state": "*", "data": {}}


static_admin_filter = filters.create(admin_filter)


@app.on_message(filters.command(["start", "help"]) & filters.private)
def welcome_handler(client, message):
    client.send_message(
        message.from_user.id,
        "<b>–ü—Ä–∏–≤–µ—Ç, —è –ø—Ä–æ—Å—Ç–æ –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞!</b>\n–°–æ–∑–¥–∞—Ç–µ–ª—å üëâ @motion_donik",
    )


@app.on_message(filters.command(["all"]) & static_admin_filter & filters.private)
def get_all_posts(client, message):
    client.send_message(
        message.from_user.id,
        "–í—Å–µ —á–∞—Ç—ã –ø–æ –∫–æ—Ç–æ—Ä—ã–º –∏–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∞!\n"
        + "\n".join([f"{p.id}, {p.chat_id}, {p.timer} —Å–µ–∫—É–Ω–¥" for p in Post.select()]),
    )


@app.on_message(filters.command(["go"]) & static_admin_filter & filters.private)
def invite_self_chat(client, message):
    payload = message.text.split(" ")
    if len(payload) == 2:
        chat = spammer.join_chat(payload[1])
        if chat:
            client.send_message(message.from_user.id, "–£—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª –≤ —á–∞—Ç!")
        else:
            client.send_message(message.from_user.id, "–í —ç—Ç–æ—Ç —á–∞—Ç –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤–æ–π—Ç–∏!")
    else:
        client.send_message(
            message.from_user.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–∏–º–µ—Ä /go t.me/uzbdesignerszone"
        )


@app.on_message(
    filters.command(["post", "posting"]) & static_admin_filter & filters.private,
)
def add_posting(client, message):
    payload = message.text.split(" ")
    if len(payload) == 3:
        try:
            peer = payload[1]  # spammer.resolve_peer(payload[1])
            stating[message.from_user.id] = {
                "state": "post",
                "data": {
                    "chat_id": peer,
                    "timer": int(payload[2]),
                },
            }
        except ValueError:
            client.send_message(
                message.from_user.id, "/post –ß–∏—Å–ª–æ –ß–∏—Å–ª–æ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —á–∏—Å–ª–æ–º!"
            )
        except KeyError:
            client.send_message(
                message.from_user.id, "–ß–∞—Ç —Å —Ç–∞–∫–∏–º –∞–π–¥–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω!"
            )
        else:
            client.send_message(
                message.from_user.id, "–•–æ—Ä–æ—à–æ, –æ—Ç–ø—Ä–∞–≤—å –ø–æ—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!"
            )
    else:
        client.send_message(
            message.from_user.id,
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–∏–º–µ—Ä /post –ê–π–¥–∏-—á–∞—Ç–∞ –°–µ–∫—É–Ω–¥—ã",
        )


@app.on_message(finite_state_machine("post") & filters.private)
def second_state_posting(client, message):
    data = stating[message.chat.id]["data"]
    post = Post(
        chat_id=data["chat_id"],
        timer=data["timer"],
        image=None,  # for or operator
        video=None,  # for or operator
    )  # just create object

    if message.media:
        post.text = message.caption.html
    else:
        post.text = message.text.html

    if message.photo:
        post.image = f"media/post{token_hex(8)}.jpg"
        client.download_media(message, post.image)
    elif message.video:
        post.video = f"media/post{token_hex(8)}.mp4"
        client.download_media(message, post.video)

    post.save()  # save in db

    kwargs_dict = {
        "chat_id": message.from_user.id,
        "text": "<b>–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª!</b> üëçüèº\n\n"
        f"–ß–∞—Ç: <code>{post.chat_id}</code>\n"
        f"–ú–µ–¥–∏–∞: <code>{post.image or post.video or '–ù–µ—Ç—É'}</code>\n"
        f"–¢–∞–π–º–µ—Ä: {post.timer} —Å–µ–∫—É–Ω–¥\n\n{post.text}",
    }

    if post.image:
        kwargs_dict["photo"] = post.image
        kwargs_dict["caption"] = kwargs_dict["text"]
        del kwargs_dict["text"]
        client.send_photo(**kwargs_dict)
    elif post.video:
        kwargs_dict["video"] = post.video
        kwargs_dict["caption"] = kwargs_dict["text"]
        del kwargs_dict["text"]
        client.send_video(**kwargs_dict)
    else:
        client.send_message(**kwargs_dict)

    clear_state(message.from_user.id)  # clear fsm state


if __name__ == "__main__":
    from pyrogram.session import Session

    Session.notice_displayed = True  # hacking copyright...

    spammer.start()
    app.run()
